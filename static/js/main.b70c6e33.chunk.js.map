{"version":3,"sources":["components/newTodo.jsx","components/todoItem.jsx","components/props.js","components/todoList.jsx","components/filterTodos.jsx","App.js","components/localStorage.js","index.js"],"names":["NewTodo","React","memo","addTodo","useState","value","setValue","handleSubmit","useCallback","ev","key","preventDefault","type","className","placeholder","onChange","target","onKeyPress","TodoItem","PropTypes","bool","isRequired","func","string","shape","id","number","title","completed","todo","toggleAll","changeToggle","destroyTodo","filter","changeTitle","setCompleted","editable","setEditable","editTitle","setEditTitle","useEffect","status","lostFocus","hidden","hiddenItem","onDoubleClick","checked","name","onClick","event","onKeyDown","onBlur","TodoList","todos","map","FilterTodos","filterChange","href","App","initialValue","localStorage","getItem","JSON","parse","setItem","stringify","newValue","useLocalStorage","setTodos","uncomplete","setUncomplete","setToggleAll","setFilter","Date","index","findIndex","updatedTodos","splice","clearCompleted","uncompleteTodos","length","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b70c6e33.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = React.memo(\n  ({ addTodo }) => {\n    const [value, setValue] = useState('');\n\n    const handleChange = (ev) => {\n      setValue(ev.target.value);\n    };\n\n    const handleSubmit = useCallback((ev) => {\n      if (ev.key === 'Enter') {\n        ev.preventDefault();\n        addTodo(value);\n        setValue('');\n      }\n    }, [value]);\n\n    return (\n      <form>\n        <input\n          type=\"text\"\n          value={value}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={handleChange}\n          onKeyPress={handleSubmit}\n        />\n      </form>\n    );\n  },\n);\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\r\nimport { commonProps, todoShape } from './props';\r\nimport '../styles/todo-list.css';\r\n\r\nexport const TodoItem = ({\r\n  todo,\r\n  toggleAll,\r\n  changeToggle,\r\n  destroyTodo,\r\n  filter,\r\n  changeTitle,\r\n}) => {\r\n  const [completed, setCompleted] = useState(todo.completed);\r\n  const [editable, setEditable] = useState(false);\r\n  const [editTitle, setEditTitle] = useState(todo.title);\r\n\r\n  useEffect(() => {\r\n    setCompleted(toggleAll);\r\n\r\n    if (toggleAll) {\r\n      changeToggle(todo.id, true);\r\n    } else {\r\n      changeToggle(todo.id, false);\r\n    }\r\n  }, [toggleAll]);\r\n\r\n  const hiddenItem = () => {\r\n    switch (filter) {\r\n      case 'Completed':\r\n        return !completed;\r\n      case 'Active':\r\n        return completed;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  const handleChange = () => {\r\n    setCompleted(!completed);\r\n    changeToggle(todo.id, !completed);\r\n  };\r\n\r\n  const handleEdit = (event) => {\r\n    const { value } = event.target;\r\n\r\n    setEditTitle(value);\r\n  };\r\n\r\n  const saveChanges = (ev) => {\r\n    if (ev.key === 'Enter' && editTitle) {\r\n      lostFocus();\r\n    }\r\n\r\n    if (ev.key === 'Escape') {\r\n      setEditable(false);\r\n      setEditTitle(todo.title);\r\n    }\r\n  };\r\n\r\n  const classNameLi = (status) => {\r\n    if (editable) {\r\n      return 'editing';\r\n    }\r\n\r\n    return status ? 'completed' : '';\r\n  };\r\n\r\n  const lostFocus = () => {\r\n    changeTitle(todo.id, editTitle);\r\n    setEditable(false);\r\n  };\r\n\r\n  return (\r\n    <li\r\n      key={todo.id}\r\n      className={classNameLi(completed)}\r\n      hidden={hiddenItem()}\r\n      onDoubleClick={() => setEditable(true)}\r\n    >\r\n      <div className=\"view\">\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"toggle\"\r\n          checked={completed}\r\n          onChange={handleChange}\r\n        />\r\n        <label>{todo.title}</label>\r\n        <button\r\n          type=\"button\"\r\n          name={todo.id}\r\n          className=\"destroy\"\r\n          onClick={destroyTodo}\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        className=\"edit\"\r\n        value={editTitle}\r\n        onChange={handleEdit}\r\n        onKeyDown={saveChanges}\r\n        onBlur={lostFocus}\r\n      />\r\n    </li>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  todo: todoShape.isRequired,\r\n  ...commonProps,\r\n};\r\n","import PropTypes from 'prop-types';\n\nexport const commonProps = {\n  toggleAll: PropTypes.bool.isRequired,\n  changeToggle: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nexport const todoShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { commonProps, todoShape } from './props';\r\nimport { TodoItem } from './todoItem';\r\n\r\nexport const TodoList = ({\r\n  todos,\r\n  toggleAll,\r\n  changeToggle,\r\n  destroyTodo,\r\n  filter,\r\n  changeTitle,\r\n}) => (\r\n  <>\r\n    {todos.map(todo => (\r\n      <TodoItem\r\n        todo={todo}\r\n        key={todo.id}\r\n        toggleAll={toggleAll}\r\n        changeToggle={changeToggle}\r\n        destroyTodo={destroyTodo}\r\n        filter={filter}\r\n        changeTitle={changeTitle}\r\n      />\r\n    ))}\r\n  </>\r\n);\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(todoShape.isRequired).isRequired,\r\n  ...commonProps,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const FilterTodos = ({ filterChange, filter }) => (\r\n  <ul className=\"filters\">\r\n    <li>\r\n      <a\r\n        href=\"#/\"\r\n        className={(filter === 'All') ? 'selected' : ''}\r\n        name=\"All\"\r\n        onClick={filterChange}\r\n      >\r\n        All\r\n      </a>\r\n    </li>\r\n\r\n    <li>\r\n      <a\r\n        href=\"#/active\"\r\n        className={(filter === 'Active') ? 'selected' : ''}\r\n        name=\"Active\"\r\n        onClick={filterChange}\r\n      >\r\n        Active\r\n      </a>\r\n    </li>\r\n\r\n    <li>\r\n      <a\r\n        href=\"#/completed\"\r\n        className={(filter === 'Completed') ? 'selected' : ''}\r\n        name=\"Completed\"\r\n        onClick={filterChange}\r\n      >\r\n        Completed\r\n      </a>\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nFilterTodos.propTypes = {\r\n  filterChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { NewTodo } from './components/newTodo';\nimport { TodoList } from './components/todoList';\nimport { FilterTodos } from './components/filterTodos';\nimport { useLocalStorage } from './components/localStorage';\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todosArr');\n  const [uncomplete, setUncomplete] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filter, setFilter] = useState('All');\n\n  const filterChange = (event) => {\n    setFilter(event.target.name);\n  };\n\n  const changeToggle = (id, completed) => {\n    const index = todos.findIndex(todo => todo.id === id);\n    const updatedTodos = [...todos];\n\n    updatedTodos[index].completed = completed;\n    setTodos(updatedTodos);\n  };\n\n  const addTodo = useCallback((value) => {\n    const todo = {\n      id: +new Date(),\n      title: value,\n      completed: false,\n    };\n\n    if (!value) {\n      return;\n    }\n\n    setTodos([...todos, todo]);\n  }, [todos]);\n\n  const destroyTodo = useCallback((event) => {\n    const { name } = event.target;\n    const index = todos.findIndex(todo => todo.id === +name);\n    const updatedTodos = [...todos];\n\n    updatedTodos.splice(index, 1);\n\n    setTodos(updatedTodos);\n  }, [todos]);\n\n  const clearCompleted = useCallback(() => {\n    const updatedTodos = [...todos].filter(todo => !todo.completed);\n\n    setTodos(updatedTodos);\n    setToggleAll(false);\n  }, [todos]);\n\n  const changeTitle = (id, title) => {\n    const index = todos.findIndex(todo => todo.id === id);\n    const updatedTodos = [...todos];\n\n    updatedTodos[index].title = title;\n    setTodos(updatedTodos);\n  };\n\n  useEffect(() => {\n    const uncompleteTodos = todos.filter(todo => !todo.completed);\n\n    setUncomplete(uncompleteTodos);\n  }, [todos, toggleAll]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTodo addTodo={addTodo} />\n      </header>\n\n      {(todos.length !== 0) && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={uncomplete.length === 0}\n              onChange={() => {\n                setToggleAll(!toggleAll);\n              }}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <ul className=\"todo-list\">\n              <TodoList\n                todos={todos}\n                toggleAll={toggleAll}\n                changeToggle={changeToggle}\n                destroyTodo={destroyTodo}\n                filter={filter}\n                changeTitle={changeTitle}\n              />\n            </ul>\n          </section>\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${uncomplete.length} items left`}\n            </span>\n\n            <FilterTodos\n              filterChange={filterChange}\n              filter={filter}\n            />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key) => {\n  let initialValue = localStorage.getItem(key)\n    ? JSON.parse(localStorage.getItem(key))\n    : [];\n\n  localStorage.setItem(key, JSON.stringify(initialValue));\n\n  const [value, setValue] = useState(initialValue);\n\n  const addValue = (newValue) => {\n    setValue(newValue);\n    initialValue = newValue;\n    localStorage.setItem(key, JSON.stringify(initialValue));\n  };\n\n  return [value, addValue];\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './styles/index.css';\r\nimport './styles/todo-list.css';\r\nimport './styles/filters.css';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}