{"version":3,"sources":["components/newTodo.jsx","components/todoItem.jsx","components/props.js","components/todoList.jsx","components/filterTodos.jsx","App.js","index.js"],"names":["NewTodo","addTodo","useState","value","setValue","type","className","placeholder","onChange","ev","target","onKeyPress","key","preventDefault","TodoItem","PropTypes","func","isRequired","string","shape","id","number","title","completed","bool","todo","toggleAll","changeToggle","destroyTodo","filter","changeTitle","setCompleted","editable","setEditable","editTitle","setEditTitle","useEffect","status","lostFocus","hidden","hiddenItem","onDoubleClick","checked","name","onClick","event","onKeyDown","onBlur","TodoList","todos","map","FilterTodos","filterChange","href","App","initialValue","localStorage","getItem","JSON","parse","setItem","stringify","newValue","useLocalStorage","setTodos","uncomplete","setUncomplete","setToggleAll","setFilter","uncompleteTodos","Date","length","htmlFor","index","findIndex","updatedTodos","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0de1ffa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewTodo = ({ addTodo }) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = (ev) => {\n    setValue(ev.target.value);\n  };\n\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={value}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handleChange}\n        onKeyPress={(ev) => {\n          if (ev.key === 'Enter') {\n            ev.preventDefault();\n            addTodo(value);\n            setValue('');\n          }\n        }}\n      />\n    </form>\n  );\n};\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { commonProps, todoShape } from './props';\nimport '../styles/todo-list.css';\n\nexport const TodoItem = ({\n  todo,\n  toggleAll,\n  changeToggle,\n  destroyTodo,\n  filter,\n  changeTitle,\n}) => {\n  const [completed, setCompleted] = useState(todo.completed);\n  const [editable, setEditable] = useState(false);\n  const [editTitle, setEditTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setCompleted(toggleAll);\n\n    if (toggleAll) {\n      changeToggle(todo.id, true);\n    } else {\n      changeToggle(todo.id, false);\n    }\n  }, [toggleAll]);\n\n  const hiddenItem = () => {\n    switch (filter) {\n      case 'Completed':\n        return !completed;\n      case 'Active':\n        return completed;\n      default:\n        return false;\n    }\n  };\n\n  const handleChange = () => {\n    setCompleted(!completed);\n    changeToggle(todo.id, !completed);\n  };\n\n  const handleEdit = (event) => {\n    const { value } = event.target;\n\n    setEditTitle(value);\n  };\n\n  const saveChanges = (ev) => {\n    if (ev.key === 'Enter' && editTitle) {\n      lostFocus();\n    }\n\n    if (ev.key === 'Escape') {\n      setEditable(false);\n      setEditTitle(todo.title);\n    }\n  };\n\n  const classNameLi = (status) => {\n    if (editable) {\n      return 'editing';\n    }\n\n    return status ? 'completed' : '';\n  };\n\n  const lostFocus = () => {\n    changeTitle(todo.id, editTitle);\n    setEditable(false);\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={classNameLi(completed)}\n      hidden={hiddenItem()}\n      onDoubleClick={() => setEditable(true)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          onChange={handleChange}\n        />\n        <label>{todo.title}</label>\n        <button\n          type=\"button\"\n          name={todo.id}\n          className=\"destroy\"\n          onClick={destroyTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={editTitle}\n        onChange={handleEdit}\n        onKeyDown={saveChanges}\n        onBlur={lostFocus}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: todoShape.isRequired,\n  ...commonProps,\n};\n","import PropTypes from 'prop-types';\n\nexport const commonProps = {\n  toggleAll: PropTypes.func.isRequired,\n  changeToggle: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n};\n\nexport const todoShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { commonProps, todoShape } from './props';\nimport { TodoItem } from './todoItem';\n\nexport const TodoList = ({\n  todos,\n  toggleAll,\n  changeToggle,\n  destroyTodo,\n  filter,\n  changeTitle,\n}) => (\n  <>\n    {todos.map(todo => (\n      <TodoItem\n        todo={todo}\n        key={todo.id}\n        toggleAll={toggleAll}\n        changeToggle={changeToggle}\n        destroyTodo={destroyTodo}\n        filter={filter}\n        changeTitle={changeTitle}\n      />\n    ))}\n  </>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(todoShape.isRequired).isRequired,\n  ...commonProps,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const FilterTodos = ({ filterChange, filter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={(filter === 'All') ? 'selected' : ''}\n        name=\"All\"\n        onClick={filterChange}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={(filter === 'Active') ? 'selected' : ''}\n        name=\"Active\"\n        onClick={filterChange}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={(filter === 'Completed') ? 'selected' : ''}\n        name=\"Completed\"\n        onClick={filterChange}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nFilterTodos.propTypes = {\n  filterChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewTodo } from './components/newTodo';\nimport { TodoList } from './components/todoList';\nimport { FilterTodos } from './components/filterTodos';\n\nconst useLocalStorage = (key) => {\n  let initialValue = localStorage.getItem(key)\n    ? JSON.parse(localStorage.getItem(key))\n    : [];\n\n  localStorage.setItem(key, JSON.stringify(initialValue));\n\n  const [value, setValue] = useState(initialValue);\n\n  const addValue = (newValue) => {\n    setValue(newValue);\n    initialValue = newValue;\n    localStorage.setItem(key, JSON.stringify(initialValue));\n  };\n\n  return [value, addValue];\n};\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todosArr');\n  const [uncomplete, setUncomplete] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filter, setFilter] = useState('All');\n\n  const filterChange = (event) => {\n    setFilter(event.target.name);\n  };\n\n  const changeToggle = (id, completed) => {\n    const index = todos.findIndex(todo => todo.id === id);\n    const updatedTodos = [...todos];\n\n    updatedTodos[index].completed = completed;\n    setTodos(updatedTodos);\n  };\n\n  const addTodo = (value) => {\n    const todo = {\n      id: +new Date(),\n      title: value,\n      completed: false,\n    };\n\n    if (!value) {\n      return;\n    }\n\n    setTodos([...todos, todo]);\n  };\n\n  const destroyTodo = (event) => {\n    const { name } = event.target;\n    const index = todos.findIndex(todo => todo.id === +name);\n    const updatedTodos = [...todos];\n\n    updatedTodos.splice(index, 1);\n\n    setTodos(updatedTodos);\n  };\n\n  const clearCompleted = () => {\n    const updatedTodos = [...todos].filter(todo => !todo.completed);\n\n    setTodos(updatedTodos);\n    setToggleAll(false);\n  };\n\n  const changeTitle = (id, title) => {\n    const index = todos.findIndex(todo => todo.id === id);\n    const updatedTodos = [...todos];\n\n    updatedTodos[index].title = title;\n    setTodos(updatedTodos);\n  };\n\n  useEffect(() => {\n    const uncompleteTodos = todos.filter(todo => !todo.completed);\n\n    setUncomplete(uncompleteTodos);\n  }, [todos, toggleAll]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTodo addTodo={addTodo} />\n      </header>\n\n      {(todos.length !== 0) && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={uncomplete.length === 0}\n              onChange={() => {\n                setToggleAll(!toggleAll);\n              }}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            <ul className=\"todo-list\">\n              <TodoList\n                todos={todos}\n                toggleAll={toggleAll}\n                changeToggle={changeToggle}\n                destroyTodo={destroyTodo}\n                filter={filter}\n                changeTitle={changeTitle}\n              />\n            </ul>\n          </section>\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {`${uncomplete.length} items left`}\n            </span>\n\n            <FilterTodos\n              filterChange={filterChange}\n              filter={filter}\n            />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './styles/index.css';\r\nimport './styles/todo-list.css';\r\nimport './styles/filters.css';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}